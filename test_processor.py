#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from document_processor_standalone import DocumentProcessor, ProcessingStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DocumentProcessor...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = DocumentProcessor(max_workers=2)
    
    # –ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async def test_callback(user_id: int, message: str):
        print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id}: {message}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback
    processor.set_notification_callback(test_callback)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    await processor.start()
    
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    print("\nüìã –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    test_tasks = [
        (123, "test_doc1.pdf", "/tmp/test1.pdf"),
        (456, "test_doc2.jpg", "/tmp/test2.jpg"),
        (789, "test_doc3.docx", "/tmp/test3.docx"),
    ]
    
    task_ids = []
    for user_id, filename, file_path in test_tasks:
        try:
            task_id = await processor.add_task(user_id, filename, file_path)
            task_ids.append(task_id)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id[:8]} –¥–ª—è {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    await asyncio.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á:")
    for task_id in task_ids:
        task = await processor.get_task_status(task_id)
        if task:
            print(f"–ó–∞–¥–∞—á–∞ {task_id[:8]}: {task.status.value}")
        else:
            print(f"–ó–∞–¥–∞—á–∞ {task_id[:8]}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_stats()
    print(f"\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    await processor.stop()
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_processor()) 