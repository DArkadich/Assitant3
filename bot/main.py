import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from dotenv import load_dotenv
from aiogram.filters import Command

from storage import storage
from analytics import Analytics
from validator import validator
from document_processor import processor
from rag import rag_index

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

analytics = Analytics()
TEMP_DIR = os.path.join(os.path.dirname(__file__), "..", "data", "temp")
os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

ALLOWED_EXTENSIONS = {"pdf", "jpg", "jpeg", "docx", "xlsx", "zip"}

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

async def notification_callback(user_id: int, message: str):
    try:
        await bot.send_message(user_id, message, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@dp.message()
async def handle_document(message: Message):
    if message.content_type != types.ContentType.DOCUMENT:
        return
    document = message.document
    filename = document.file_name
    if not allowed_file(filename):
        await message.reply("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, JPG, DOCX, XLSX, ZIP.")
        return
    file_path = os.path.join(TEMP_DIR, filename)
    await document.download(destination_file=file_path)
    task_id = await processor.add_task(message.from_user.id, filename, file_path)
    await message.reply(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{filename}' –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (ID: {task_id[:8]})")

@dp.message()
async def handle_photo(message: Message):
    if message.content_type != types.ContentType.PHOTO:
        return
    photo = message.photo[-1]
    file_id = photo.file_id
    filename = f"photo_{file_id}.jpg"
    file_path = os.path.join(TEMP_DIR, filename)
    await photo.download(destination_file=file_path)
    task_id = await processor.add_task(message.from_user.id, filename, file_path)
    await message.reply(f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (ID: {task_id[:8]})")

@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    help_text = """
ü§ñ –î–æ–∫—É–º–µ–Ω—Ç-–±–æ—Ç ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start, /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
/report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
/unclosed ‚Äî –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ü–µ–ø–æ—á–∫–∏
/monthly ‚Äî –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
/chain <–Ω–æ–º–µ—Ä> ‚Äî –¥–µ—Ç–∞–ª–∏ —Ü–µ–ø–æ—á–∫–∏
/status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/validate <json> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
/tasks ‚Äî –º–æ–∏ –∑–∞–¥–∞—á–∏
/task <id> ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
/find <—Ç–µ–∫—Å—Ç> ‚Äî —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!
    """
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("report"))
async def handle_report(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º.")

@dp.message(Command("unclosed"))
async def handle_unclosed(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Ü–µ–ø–æ—á–∫–∞–º.")

@dp.message(Command("monthly"))
async def handle_monthly(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç.")

@dp.message(Command("chain"))
async def handle_chain(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–µ—Ç–∞–ª–∏ —Ü–µ–ø–æ—á–∫–∏.")

@dp.message(Command("status"))
async def handle_status(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.")

@dp.message(Command("validate"))
async def handle_validate(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("tasks"))
async def handle_tasks(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.")

@dp.message(Command("task"))
async def handle_task_status(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.")

@dp.message(Command("find"))
async def handle_find(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫.")

async def setup_processor():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    processor.set_notification_callback(notification_callback)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    await processor.start()
    
    logging.info("DocumentProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")

async def main():
    await setup_processor()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main()) 