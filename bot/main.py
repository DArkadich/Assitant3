import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from dotenv import load_dotenv

from storage import storage
from analytics import Analytics
from validator import validator
from document_processor import processor
from rag import rag_index

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

analytics = Analytics()
TEMP_DIR = os.path.join(os.path.dirname(__file__), "..", "data", "temp")
os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

ALLOWED_EXTENSIONS = {"pdf", "jpg", "jpeg", "docx", "xlsx", "zip"}

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

async def notification_callback(user_id: int, message: str):
    try:
        await bot.send_message(user_id, message, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@dp.message()
async def handle_document(message: Message):
    if message.content_type != types.ContentType.DOCUMENT:
        return
    document = message.document
    filename = document.file_name
    if not allowed_file(filename):
        await message.reply("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, JPG, DOCX, XLSX, ZIP.")
        return
    file_path = os.path.join(TEMP_DIR, filename)
    await document.download(destination_file=file_path)
    task_id = await processor.add_task(message.from_user.id, filename, file_path)
    await message.reply(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{filename}' –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (ID: {task_id[:8]})")

@dp.message()
async def handle_photo(message: Message):
    if message.content_type != types.ContentType.PHOTO:
        return
    photo = message.photo[-1]
    file_id = photo.file_id
    filename = f"photo_{file_id}.jpg"
    file_path = os.path.join(TEMP_DIR, filename)
    await photo.download(destination_file=file_path)
    task_id = await processor.add_task(message.from_user.id, filename, file_path)
    await message.reply(f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (ID: {task_id[:8]})")

@dp.message(commands=["start", "help"])
async def send_welcome(message: Message):
    help_text = """
ü§ñ **–î–æ–∫—É–º–µ–Ω—Ç-–±–æ—Ç** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, JPG, DOCX, XLSX, ZIP) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–û—Ç—á—ë—Ç—ã:**
üìä `/report` - –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
üìä `/report <–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç>` - –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
üìä `/unclosed` - –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏
üìä `/monthly` - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
üìä `/chain <–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞>` - –¥–µ—Ç–∞–ª–∏ —Ü–µ–ø–æ—á–∫–∏

**–°–∏—Å—Ç–µ–º–∞:**
üîß `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–µ—Ä–µ–¥–∏
üîß `/validate <—Ç–µ–∫—Å—Ç>` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
üîß `/tasks` - –º–æ–∏ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
üîß `/task <id>` - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
üîß `/find <—Ç–µ–∫—Å—Ç>` - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
`/report –û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞`
`/chain –î-2024-001`
`/monthly 2024 12`
`/validate {"counterparty": "–û–û–û –¢–µ—Å—Ç", "inn": "1234567890"}`

–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.reply(help_text, parse_mode="Markdown")

@dp.message(commands=["report"])
async def handle_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"""
    try:
        args = message.get_args().strip()
        if args:
            # –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
            report = analytics.generate_counterparty_report(counterparty=args)
            if report['counterparties']:
                counterparty = report['counterparties'][0]
                response = f"""
üìä **–û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: {counterparty['name']}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–ù–ù: {counterparty['inn'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ü–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {counterparty['first_document_date'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: {counterparty['last_document_date'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {counterparty['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {counterparty['document_count']}

üìÑ **–ü–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã: {counterparty['contracts_count']} ({counterparty['contracts_amount']:,.2f} ‚ÇΩ)
‚Ä¢ –°—á–µ—Ç–∞: {counterparty['invoices_count']} ({counterparty['invoices_amount']:,.2f} ‚ÇΩ)
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {counterparty['closing_docs_count']} ({counterparty['closing_amount']:,.2f} ‚ÇΩ)

‚ö†Ô∏è **–ù–µ–∑–∞–∫—Ä—ã—Ç–æ: {counterparty['unclosed_amount']:,.2f} ‚ÇΩ**
                """
            else:
                response = f"‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        else:
            # –û–±—â–∏–π –æ—Ç—á—ë—Ç
            report = analytics.generate_counterparty_report()
            summary = report['summary']
            response = f"""
üìä **–û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º**

üìã **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {summary['total_counterparties']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}

üîù **–¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ:**
            """
            
            for i, cp in enumerate(report['counterparties'][:5], 1):
                response += f"\n{i}. {cp['name']} - {cp['total_amount']:,.2f} ‚ÇΩ ({cp['document_count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message(commands=["unclosed"])
async def handle_unclosed(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ü–µ–ø–æ—á–µ–∫"""
    try:
        report = analytics.generate_unclosed_chains_report()
        summary = report['summary']
        
        response = f"""
‚ö†Ô∏è **–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏**

üìä **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ü–µ–ø–æ—á–µ–∫: {summary['total_unclosed_chains']}
‚Ä¢ –û–±—â–∞—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—É–º–º–∞: {summary['total_remaining_amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—É–º–º–∞: {summary['average_remaining_amount']:,.2f} ‚ÇΩ

üìÖ **–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:**
‚Ä¢ –ù–æ–≤—ã–µ (‚â§30 –¥–Ω–µ–π): {report['by_age_category']['–Ω–æ–≤—ã–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['–Ω–æ–≤—ã–µ']['amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (31-90 –¥–Ω–µ–π): {report['by_age_category']['—Å—Ä–µ–¥–Ω–∏–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['—Å—Ä–µ–¥–Ω–∏–µ']['amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ç–∞—Ä—ã–µ (>90 –¥–Ω–µ–π): {report['by_age_category']['—Å—Ç–∞—Ä—ã–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['—Å—Ç–∞—Ä—ã–µ']['amount']:,.2f} ‚ÇΩ

üîù **–¢–æ–ø-5 –ø–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å—É–º–º–µ:**
        """
        
        for i, chain in enumerate(report['chains'][:5], 1):
            response += f"\n{i}. {chain['contract_number']} ({chain['counterparty']}) - {chain['remaining_amount']:,.2f} ‚ÇΩ ({chain['age_days']} –¥–Ω–µ–π)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message(commands=["monthly"])
async def handle_monthly(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    try:
        args = message.get_args().strip().split()
        if len(args) >= 2:
            year, month = int(args[0]), int(args[1])
        else:
            year, month = None, None
        
        report = analytics.generate_monthly_report(year, month)
        summary = report['summary']
        
        response = f"""
üìä **–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {report['period']}**

üìã **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {summary['unique_counterparties']}
‚Ä¢ –¢–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['document_types']}

üîù **–¢–æ–ø-3 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:**
        """
        
        for i, (name, data) in enumerate(list(report['top_counterparties'].items())[:3], 1):
            response += f"\n{i}. {name} - {data['amount']:,.2f} ‚ÇΩ ({data['doc_type']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message(commands=["chain"])
async def handle_chain(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ø–æ—á–∫–∏"""
    try:
        contract_number = message.get_args().strip()
        if not contract_number:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: `/chain –î-2024-001`")
            return
        
        chain_details = storage.get_chain_details(contract_number)
        if not chain_details:
            await message.reply(f"‚ùå –¶–µ–ø–æ—á–∫–∞ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ '{contract_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        response = f"""
üîó **–¶–µ–ø–æ—á–∫–∞: {contract_number}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {chain_details['counterparty']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {chain_details['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {chain_details['closed_amount']:,.2f} ‚ÇΩ
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {chain_details['remaining_amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ç–∞—Ç—É—Å: {chain_details['status']}

üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ü–µ–ø–æ—á–∫–µ ({len(chain_details['documents'])}):**
        """
        
        for doc in chain_details['documents']:
            response += f"\n‚Ä¢ {doc['doc_type'].title()} ‚Ññ{doc['doc_number']} –æ—Ç {doc['date']} - {doc['amount']:,.2f} ‚ÇΩ"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ø–æ—á–∫–∏: {e}")

@dp.message(commands=["status"])
async def handle_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor_stats = processor.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            db_stats = storage.get_database_stats()
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
            db_info = f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_stats.get('total_documents', 0)}, –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {db_stats.get('total_counterparties', 0)}"
        except Exception as db_error:
            db_status = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            db_info = str(db_error)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É LLM
            llm_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
        except:
            llm_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

üìä **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {processor_stats['active_tasks']}
‚Ä¢ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {processor_stats['queue_size']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {processor_stats['completed_tasks']}
‚Ä¢ –í–æ—Ä–∫–µ—Ä–æ–≤: {processor_stats['workers']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü° –ó–∞–Ω—è—Ç–∞' if processor_stats['queue_size'] > 0 or processor_stats['active_tasks'] > 0 else 'üü¢ –°–≤–æ–±–æ–¥–Ω–∞'}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processor_stats['total_processed']}
‚Ä¢ –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processor_stats['total_failed']}
‚Ä¢ –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {processor_stats['total_validation_failed']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {processor_stats['average_processing_time']:.1f} —Å–µ–∫

üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {db_status}
‚Ä¢ {db_info}

ü§ñ **LLM —Å–µ—Ä–≤–∏—Å:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {llm_status}

üíæ **–•—Ä–∞–Ω–∏–ª–∏—â–µ:**
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}
‚Ä¢ –†–∞–∑–º–µ—Ä: {sum(os.path.getsize(os.path.join(TEMP_DIR, f)) for f in os.listdir(TEMP_DIR) if os.path.isfile(os.path.join(TEMP_DIR, f))):,} –±–∞–π—Ç
        """
        
        await message.reply(status_message, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@dp.message(commands=["validate"])
async def handle_validate(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        args = message.get_args().strip()
        if not args:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\n\n–ü—Ä–∏–º–µ—Ä: `/validate {\"counterparty\": \"–û–û–û –¢–µ—Å—Ç\", \"inn\": \"1234567890\"}`")
            return
        
        try:
            import json
            test_data = json.loads(args)
        except json.JSONDecodeError:
            await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        is_valid, errors, warnings = validator.validate_document_data(test_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        validation_message = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n\n"
        
        if errors:
            validation_message += "‚ùå **–û—à–∏–±–∫–∏:**\n"
            for error in errors:
                validation_message += f"‚Ä¢ {error}\n"
            validation_message += "\n"
        
        if warnings:
            validation_message += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in warnings:
                validation_message += f"‚Ä¢ {warning}\n"
            validation_message += "\n"
        
        if is_valid:
            validation_message += "‚úÖ **–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**"
        else:
            validation_message += "‚ùå **–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**"
        
        await message.reply(validation_message, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

@dp.message(commands=["tasks"])
async def handle_tasks(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tasks = await processor.get_user_tasks(message.from_user.id)
        
        if not tasks:
            await message.reply("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return
        
        response = f"üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(tasks)}):**\n\n"
        
        for i, task in enumerate(tasks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = {
                'pending': '‚è≥',
                'processing': '‚öôÔ∏è',
                'completed': '‚úÖ',
                'failed': '‚ùå',
                'validation_failed': '‚ö†Ô∏è'
            }.get(task.status.value, '‚ùì')
            
            response += f"{i}. {status_emoji} **{task.filename}** (ID: {task.id[:8]})\n"
            response += f"   –°—Ç–∞—Ç—É—Å: {task.status.value}\n"
            response += f"   –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if task.completed_at:
                response += f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if task.error:
                response += f"   –û—à–∏–±–∫–∞: {task.error[:50]}...\n"
            
            response += "\n"
        
        if len(tasks) > 10:
            response += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")

@dp.message(commands=["task"])
async def handle_task_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        task_id = message.get_args().strip()
        if not task_id:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: `/task abc12345`")
            return
        
        # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ ID (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–º—É)
        task = None
        if len(task_id) == 8:
            # –ò—â–µ–º –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
            for t in list(processor.active_tasks.values()) + list(processor.completed_tasks.values()):
                if t.id.startswith(task_id):
                    task = t
                    break
        else:
            # –ò—â–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É ID
            task = await processor.get_task_status(task_id)
        
        if not task:
            await message.reply(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{task_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if task.user_id != message.from_user.id:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ")
            return
        
        status_emoji = {
            'pending': '‚è≥',
            'processing': '‚öôÔ∏è',
            'completed': '‚úÖ',
            'failed': '‚ùå',
            'validation_failed': '‚ö†Ô∏è'
        }.get(task.status.value, '‚ùì')
        
        response = f"""
{status_emoji} **–ó–∞–¥–∞—á–∞: {task.filename}**

üÜî **ID:** {task.id}
üìä **–°—Ç–∞—Ç—É—Å:** {task.status.value}
üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {task.created_at.strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        if task.started_at:
            response += f"‚öôÔ∏è **–ù–∞—á–∞—Ç–æ:** {task.started_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        
        if task.completed_at:
            response += f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {task.completed_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
            if task.started_at:
                processing_time = (task.completed_at - task.started_at).total_seconds()
                response += f"‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {processing_time:.1f} —Å–µ–∫\n"
        
        if task.error:
            response += f"\n‚ùå **–û—à–∏–±–∫–∞:** {task.error}\n"
        
        if task.validation_errors:
            response += f"\n‚ö†Ô∏è **–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n"
            for error in task.validation_errors:
                response += f"‚Ä¢ {error}\n"
        
        if task.validation_warnings:
            response += f"\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in task.validation_warnings:
                response += f"‚Ä¢ {warning}\n"
        
        if task.result and task.status.value == 'completed':
            response += f"\nüìÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n"
            response += f"‚Ä¢ ID –≤ –±–∞–∑–µ: {task.result.get('doc_id')}\n"
            response += f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task.result.get('processing_time', 0):.1f} —Å–µ–∫\n"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")

@dp.message(commands=["find"])
async def handle_find(message: Message):
    query = message.get_args().strip()
    if not query:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: `/find <—Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä>`")
        return
    try:
        results = rag_index.search(query, top_k=5)
        if not results:
            await message.reply("‚ùå –ü–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        response = "üîé **–ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n\n"
        for i, doc in enumerate(results, 1):
            response += f"{i}. **ID:** {doc['doc_id']}\n"
            response += f"   {doc.get('doc_type', '')} | {doc.get('counterparty', '')} | {doc.get('doc_number', '')}\n"
            response += f"   –°—Ö–æ–¥—Å—Ç–≤–æ: {doc['distance']:.4f}\n"
            response += f"   –§—Ä–∞–≥–º–µ–Ω—Ç: {doc['text'][:100]}...\n\n"
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def setup_processor():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    processor.set_notification_callback(notification_callback)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    await processor.start()
    
    logging.info("DocumentProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")

async def main():
    await setup_processor()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main()) 