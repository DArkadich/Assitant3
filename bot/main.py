import logging
logging.basicConfig(level=logging.INFO)

import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher.filters import ContentTypeFilter
from dotenv import load_dotenv

from extractor import extract_fields_from_text, process_file_with_classification, classify_document_universal
from storage import storage
from analytics import Analytics
from validator import validator

# –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
task_queue = asyncio.Queue()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env (—Å–æ–∑–¥–∞–π—Ç–µ .env —Å TELEGRAM_TOKEN=...)
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics = Analytics()

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TEMP_DIR = os.path.join(os.path.dirname(__file__), "..", "data", "temp")
os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
ALLOWED_EXTENSIONS = {"pdf", "jpg", "jpeg", "docx", "xlsx", "zip"}

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

# –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def document_worker():
    while True:
        user_id, filename, file_path, ext = await task_queue.get()
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = process_file_with_classification(file_path)
            print(f"Text to LLM: {text[:200]}")
            logging.info(f"Text to LLM: {text[:200]}")
            if not text:
                await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}.")
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_type = classify_document_universal(text)
                logging.info(f"Document type determined: {doc_type}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
                fields = extract_fields_from_text(text)
                if fields:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –ø–æ–ª—è
                    fields['doc_type'] = doc_type
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–æ–ª–µ–π
                    ordered_fields = {
                        'doc_type': fields['doc_type'],
                        'counterparty': fields['counterparty'],
                        'inn': fields['inn'],
                        'doc_number': fields['doc_number'],
                        'date': fields['date'],
                        'amount': fields['amount'],
                        'subject': fields['subject'],
                        'contract_number': fields['contract_number']
                    }
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    is_valid, errors, warnings = validator.validate_document_data(ordered_fields)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    validation_message = f"üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{filename}':**\n\n"
                    
                    if errors:
                        validation_message += "‚ùå **–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n"
                        for error in errors:
                            validation_message += f"‚Ä¢ {error}\n"
                        validation_message += "\n"
                    
                    if warnings:
                        validation_message += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
                        for warning in warnings:
                            validation_message += f"‚Ä¢ {warning}\n"
                        validation_message += "\n"
                    
                    if is_valid:
                        validation_message += "‚úÖ **–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**\n\n"
                    else:
                        validation_message += "‚ùå **–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**\n\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    validation_message += "üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                    for key, value in ordered_fields.items():
                        validation_message += f"‚Ä¢ **{key}:** {value}\n"
                    
                    await bot.send_message(user_id, validation_message, parse_mode="Markdown")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                    if is_valid:
                        try:
                            doc_id = storage.save_document(file_path, ordered_fields, user_id)
                            await bot.send_message(user_id, f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ (ID: {doc_id})")
                        except Exception as storage_error:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {storage_error}")
                            await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {storage_error}")
                    else:
                        await bot.send_message(user_id, "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}: {e}", exc_info=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{filename}':**\n\n"
            
            if "timeout" in str(e).lower():
                error_message += "‚è∞ **–ü—Ä–∏—á–∏–Ω–∞:** –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                error_message += "**–†–µ—à–µ–Ω–∏–µ:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞–∑–±–µ–π—Ç–µ –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏"
            elif "connection" in str(e).lower():
                error_message += "üåê **–ü—Ä–∏—á–∏–Ω–∞:** –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
                error_message += "**–†–µ—à–µ–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            elif "memory" in str(e).lower():
                error_message += "üíæ **–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                error_message += "**–†–µ—à–µ–Ω–∏–µ:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
            else:
                error_message += f"üîß **–ü—Ä–∏—á–∏–Ω–∞:** {str(e)}\n\n"
                error_message += "**–†–µ—à–µ–Ω–∏–µ:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã"
            
            await bot.send_message(user_id, error_message, parse_mode="Markdown")
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as cleanup_error:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {cleanup_error}")
            
            task_queue.task_done()

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: Message):
    document = message.document
    filename = document.file_name
    if not allowed_file(filename):
        await message.reply("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, JPG, DOCX, XLSX, ZIP.")
        return
    file_path = os.path.join(TEMP_DIR, filename)
    await document.download(destination_file=file_path)
    ext = filename.rsplit(".", 1)[-1].lower()
    await message.reply(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{filename}' –ø–æ–ª—É—á–µ–Ω –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    await task_queue.put((message.from_user.id, filename, file_path, ext))

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    filename = f"photo_{file_id}.jpg"
    file_path = os.path.join(TEMP_DIR, filename)
    await photo.download(destination_file=file_path)
    await message.reply(f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    await task_queue.put((message.from_user.id, filename, file_path, "jpg"))

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: Message):
    help_text = """
ü§ñ **–î–æ–∫—É–º–µ–Ω—Ç-–±–æ—Ç** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, JPG, DOCX, XLSX, ZIP) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–û—Ç—á—ë—Ç—ã:**
üìä `/report` - –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
üìä `/report <–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç>` - –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
üìä `/unclosed` - –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏
üìä `/monthly` - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
üìä `/chain <–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞>` - –¥–µ—Ç–∞–ª–∏ —Ü–µ–ø–æ—á–∫–∏

**–°–∏—Å—Ç–µ–º–∞:**
üîß `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–µ—Ä–µ–¥–∏
üîß `/validate <—Ç–µ–∫—Å—Ç>` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö

**–ü—Ä–∏–º–µ—Ä—ã:**
`/report –û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞`
`/chain –î-2024-001`
`/monthly 2024 12`
`/validate {"counterparty": "–û–û–û –¢–µ—Å—Ç", "inn": "1234567890"}`

–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.reply(help_text, parse_mode="Markdown")

@dp.message_handler(commands=["report"])
async def handle_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"""
    try:
        args = message.get_args().strip()
        if args:
            # –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
            report = analytics.generate_counterparty_report(counterparty=args)
            if report['counterparties']:
                counterparty = report['counterparties'][0]
                response = f"""
üìä **–û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: {counterparty['name']}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–ù–ù: {counterparty['inn'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ü–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {counterparty['first_document_date'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: {counterparty['last_document_date'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {counterparty['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {counterparty['document_count']}

üìÑ **–ü–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã: {counterparty['contracts_count']} ({counterparty['contracts_amount']:,.2f} ‚ÇΩ)
‚Ä¢ –°—á–µ—Ç–∞: {counterparty['invoices_count']} ({counterparty['invoices_amount']:,.2f} ‚ÇΩ)
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {counterparty['closing_docs_count']} ({counterparty['closing_amount']:,.2f} ‚ÇΩ)

‚ö†Ô∏è **–ù–µ–∑–∞–∫—Ä—ã—Ç–æ: {counterparty['unclosed_amount']:,.2f} ‚ÇΩ**
                """
            else:
                response = f"‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        else:
            # –û–±—â–∏–π –æ—Ç—á—ë—Ç
            report = analytics.generate_counterparty_report()
            summary = report['summary']
            response = f"""
üìä **–û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º**

üìã **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {summary['total_counterparties']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}

üîù **–¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ:**
            """
            
            for i, cp in enumerate(report['counterparties'][:5], 1):
                response += f"\n{i}. {cp['name']} - {cp['total_amount']:,.2f} ‚ÇΩ ({cp['document_count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message_handler(commands=["unclosed"])
async def handle_unclosed(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ü–µ–ø–æ—á–µ–∫"""
    try:
        report = analytics.generate_unclosed_chains_report()
        summary = report['summary']
        
        response = f"""
‚ö†Ô∏è **–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏**

üìä **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ü–µ–ø–æ—á–µ–∫: {summary['total_unclosed_chains']}
‚Ä¢ –û–±—â–∞—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—É–º–º–∞: {summary['total_remaining_amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—É–º–º–∞: {summary['average_remaining_amount']:,.2f} ‚ÇΩ

üìÖ **–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:**
‚Ä¢ –ù–æ–≤—ã–µ (‚â§30 –¥–Ω–µ–π): {report['by_age_category']['–Ω–æ–≤—ã–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['–Ω–æ–≤—ã–µ']['amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (31-90 –¥–Ω–µ–π): {report['by_age_category']['—Å—Ä–µ–¥–Ω–∏–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['—Å—Ä–µ–¥–Ω–∏–µ']['amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ç–∞—Ä—ã–µ (>90 –¥–Ω–µ–π): {report['by_age_category']['—Å—Ç–∞—Ä—ã–µ']['count']} —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ {report['by_age_category']['—Å—Ç–∞—Ä—ã–µ']['amount']:,.2f} ‚ÇΩ

üîù **–¢–æ–ø-5 –ø–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å—É–º–º–µ:**
        """
        
        for i, chain in enumerate(report['chains'][:5], 1):
            response += f"\n{i}. {chain['contract_number']} ({chain['counterparty']}) - {chain['remaining_amount']:,.2f} ‚ÇΩ ({chain['age_days']} –¥–Ω–µ–π)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message_handler(commands=["monthly"])
async def handle_monthly(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    try:
        args = message.get_args().strip().split()
        if len(args) >= 2:
            year, month = int(args[0]), int(args[1])
        else:
            year, month = None, None
        
        report = analytics.generate_monthly_report(year, month)
        summary = report['summary']
        
        response = f"""
üìä **–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {report['period']}**

üìã **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {summary['unique_counterparties']}
‚Ä¢ –¢–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['document_types']}

üîù **–¢–æ–ø-3 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:**
        """
        
        for i, (name, data) in enumerate(list(report['top_counterparties'].items())[:3], 1):
            response += f"\n{i}. {name} - {data['amount']:,.2f} ‚ÇΩ ({data['doc_type']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message_handler(commands=["chain"])
async def handle_chain(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ø–æ—á–∫–∏"""
    try:
        contract_number = message.get_args().strip()
        if not contract_number:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: `/chain –î-2024-001`")
            return
        
        chain_details = storage.get_chain_details(contract_number)
        if not chain_details:
            await message.reply(f"‚ùå –¶–µ–ø–æ—á–∫–∞ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ '{contract_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        response = f"""
üîó **–¶–µ–ø–æ—á–∫–∞: {contract_number}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {chain_details['counterparty']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {chain_details['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {chain_details['closed_amount']:,.2f} ‚ÇΩ
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {chain_details['remaining_amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ç–∞—Ç—É—Å: {chain_details['status']}

üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ü–µ–ø–æ—á–∫–µ ({len(chain_details['documents'])}):**
        """
        
        for doc in chain_details['documents']:
            response += f"\n‚Ä¢ {doc['doc_type'].title()} ‚Ññ{doc['doc_number']} –æ—Ç {doc['date']} - {doc['amount']:,.2f} ‚ÇΩ"
        
        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ø–æ—á–∫–∏: {e}")

@dp.message_handler(commands=["status"])
async def handle_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
        queue_size = task_queue.qsize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            db_stats = storage.get_database_stats()
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
            db_info = f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_stats.get('total_documents', 0)}, –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {db_stats.get('total_counterparties', 0)}"
        except Exception as db_error:
            db_status = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            db_info = str(db_error)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É LLM
            llm_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
        except:
            llm_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

üìä **–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_size}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü° –ó–∞–Ω—è—Ç–∞' if queue_size > 0 else 'üü¢ –°–≤–æ–±–æ–¥–Ω–∞'}

üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {db_status}
‚Ä¢ {db_info}

ü§ñ **LLM —Å–µ—Ä–≤–∏—Å:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {llm_status}

üíæ **–•—Ä–∞–Ω–∏–ª–∏—â–µ:**
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}
‚Ä¢ –†–∞–∑–º–µ—Ä: {sum(os.path.getsize(os.path.join(TEMP_DIR, f)) for f in os.listdir(TEMP_DIR) if os.path.isfile(os.path.join(TEMP_DIR, f))):,} –±–∞–π—Ç
        """
        
        await message.reply(status_message, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@dp.message_handler(commands=["validate"])
async def handle_validate(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        args = message.get_args().strip()
        if not args:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\n\n–ü—Ä–∏–º–µ—Ä: `/validate {\"counterparty\": \"–û–û–û –¢–µ—Å—Ç\", \"inn\": \"1234567890\"}`")
            return
        
        try:
            import json
            test_data = json.loads(args)
        except json.JSONDecodeError:
            await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        is_valid, errors, warnings = validator.validate_document_data(test_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        validation_message = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n\n"
        
        if errors:
            validation_message += "‚ùå **–û—à–∏–±–∫–∏:**\n"
            for error in errors:
                validation_message += f"‚Ä¢ {error}\n"
            validation_message += "\n"
        
        if warnings:
            validation_message += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in warnings:
                validation_message += f"‚Ä¢ {warning}\n"
            validation_message += "\n"
        
        if is_valid:
            validation_message += "‚úÖ **–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**"
        else:
            validation_message += "‚ùå **–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é**"
        
        await message.reply(validation_message, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

def main():
    loop = asyncio.get_event_loop()
    loop.create_task(document_worker())
    executor.start_polling(dp, skip_updates=True, loop=loop)

if __name__ == "__main__":
    main() 