import asyncio
import logging
import os
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass
from enum import Enum
import json

from extractor import extract_fields_from_text, process_file_with_classification, classify_document_universal
from storage import storage
from validator import validator
from rag import get_rag_index

class ProcessingStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    VALIDATION_FAILED = "validation_failed"

@dataclass
class ProcessingTask:
    """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    id: str
    user_id: int
    filename: str
    file_path: str
    status: ProcessingStatus
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Optional[Dict] = None
    error: Optional[str] = None
    validation_errors: List[str] = None
    validation_warnings: List[str] = None

class DocumentProcessor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, max_workers: int = 3):
        self.max_workers = max_workers
        self.task_queue = asyncio.Queue()
        self.active_tasks: Dict[str, ProcessingTask] = {}
        self.completed_tasks: Dict[str, ProcessingTask] = {}
        self.workers: List[asyncio.Task] = []
        self.notification_callback: Optional[Callable] = None
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_processed': 0,
            'total_failed': 0,
            'total_validation_failed': 0,
            'average_processing_time': 0.0
        }
    
    def set_notification_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_callback = callback
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        if self.is_running:
            return
        
        self.is_running = True
        logging.info(f"–ó–∞–ø—É—Å–∫ DocumentProcessor —Å {self.max_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for i in range(self.max_workers):
            worker = asyncio.create_task(self._worker(f"worker-{i}"))
            self.workers.append(worker)
        
        logging.info("DocumentProcessor –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        if not self.is_running:
            return
        
        self.is_running = False
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ DocumentProcessor...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for worker in self.workers:
            worker.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        await asyncio.gather(*self.workers, return_exceptions=True)
        self.workers.clear()
        
        logging.info("DocumentProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def add_task(self, user_id: int, filename: str, file_path: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        task_id = str(uuid.uuid4())
        task = ProcessingTask(
            id=task_id,
            user_id=user_id,
            filename=filename,
            file_path=file_path,
            status=ProcessingStatus.PENDING,
            created_at=datetime.now()
        )
        
        self.active_tasks[task_id] = task
        await self.task_queue.put(task)
        
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        if self.notification_callback:
            await self.notification_callback(
                user_id, 
                f"üìã –î–æ–∫—É–º–µ–Ω—Ç '{filename}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (ID: {task_id[:8]})"
            )
        
        return task_id
    
    async def get_task_status(self, task_id: str) -> Optional[ProcessingTask]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        if task_id in self.active_tasks:
            return self.active_tasks[task_id]
        elif task_id in self.completed_tasks:
            return self.completed_tasks[task_id]
        return None
    
    async def get_user_tasks(self, user_id: int) -> List[ProcessingTask]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        tasks = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.active_tasks.values():
            if task.user_id == user_id:
                tasks.append(task)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        user_completed = [t for t in self.completed_tasks.values() if t.user_id == user_id]
        tasks.extend(sorted(user_completed, key=lambda x: x.completed_at, reverse=True)[:10])
        
        return tasks
    
    async def _worker(self, worker_name: str):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
        logging.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = await asyncio.wait_for(self.task_queue.get(), timeout=1.0)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                await self._process_task(task, worker_name)
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.task_queue.task_done()
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ {worker_name}: {e}")
        
        logging.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _process_task(self, task: ProcessingTask, worker_name: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É"""
        start_time = datetime.now()
        task.started_at = start_time
        task.status = ProcessingStatus.PROCESSING
        
        logging.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É {task.id}: {task.filename}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if self.notification_callback:
            await self.notification_callback(
                task.user_id,
                f"‚öôÔ∏è –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{task.filename}' (ID: {task.id[:8]})"
            )
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            text = process_file_with_classification(task.file_path)
            if not text:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

            # –Ø–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type = classify_document_universal(text)
            if self.notification_callback:
                await self.notification_callback(task.user_id, f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{doc_type}</b>")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è, –ø–µ—Ä–µ–¥–∞—ë–º doc_type –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            rag_results = get_rag_index().search(text, top_k=3)
            rag_context = [doc['text'] for doc in rag_results]
            fields = extract_fields_from_text(text, rag_context=rag_context, doc_type=doc_type) if 'doc_type' in extract_fields_from_text.__code__.co_varnames else extract_fields_from_text(text, rag_context=rag_context)

            if not fields:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –ø–æ–ª—è
            fields['doc_type'] = doc_type
            ordered_fields = {
                'doc_type': fields['doc_type'],
                'counterparty': fields['counterparty'],
                'inn': fields['inn'],
                'doc_number': fields['doc_number'],
                'date': fields['date'],
                'amount': fields['amount'],
                'subject': fields['subject'],
                'contract_number': fields['contract_number']
            }

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            is_valid, errors, warnings = validator.validate_document_data(ordered_fields, doc_type=doc_type)
            task.validation_errors = errors
            task.validation_warnings = warnings
            
            if not is_valid:
                task.status = ProcessingStatus.VALIDATION_FAILED
                task.error = f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {', '.join(errors)}"
                task.result = ordered_fields
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                if self.notification_callback:
                    validation_message = f"‚ùå **–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{task.filename}':**\n\n"
                    for error in errors:
                        validation_message += f"‚Ä¢ {error}\n"
                    if warnings:
                        validation_message += "\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
                        for warning in warnings:
                            validation_message += f"‚Ä¢ {warning}\n"
                    
                    await self.notification_callback(task.user_id, validation_message)
                
                self.stats['total_validation_failed'] += 1
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            doc_id = storage.save_document(task.file_path, ordered_fields, task.user_id)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            try:
                doc_text = " ".join(str(v) for v in ordered_fields.values() if v)
                get_rag_index().add_document(str(doc_id), doc_text, meta=ordered_fields)
            except Exception as e:
                logging.warning(f"RAG indexing failed: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            task.status = ProcessingStatus.COMPLETED
            task.completed_at = datetime.now()
            task.result = {
                'doc_id': doc_id,
                'fields': ordered_fields,
                'processing_time': (task.completed_at - start_time).total_seconds()
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.notification_callback:
                success_message = f"""
‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç '{task.filename}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –¢–∏–ø: {ordered_fields['doc_type']}
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {ordered_fields['counterparty']}
‚Ä¢ –ù–æ–º–µ—Ä: {ordered_fields['doc_number']}
‚Ä¢ –°—É–º–º–∞: {ordered_fields['amount']}
‚Ä¢ –î–∞—Ç–∞: {ordered_fields['date']}

üÜî **ID –≤ –±–∞–∑–µ:** {doc_id}
‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {(task.completed_at - start_time).total_seconds():.1f} —Å–µ–∫
                """
                
                if warnings:
                    success_message += "\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
                    for warning in warnings:
                        success_message += f"‚Ä¢ {warning}\n"
                
                await self.notification_callback(task.user_id, success_message)
            
            self.stats['total_processed'] += 1
            
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            task.status = ProcessingStatus.FAILED
            task.completed_at = datetime.now()
            task.error = str(e)
            
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            if self.notification_callback:
                error_message = f"""
‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{task.filename}':**

üîß **–ü—Ä–∏—á–∏–Ω–∞:** {str(e)}

üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/PDF
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —á–∏—Ç–∞–µ–º—ã–π
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–∑–∂–µ
                """
                
                await self.notification_callback(task.user_id, error_message)
            
            self.stats['total_failed'] += 1
        
        finally:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            self.completed_tasks[task.id] = task
            if task.id in self.active_tasks:
                del self.active_tasks[task.id]
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(task.file_path):
                    os.remove(task.file_path)
            except Exception as cleanup_error:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {task.file_path}: {cleanup_error}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if task.status == ProcessingStatus.COMPLETED:
                processing_time = (task.completed_at - start_time).total_seconds()
                total_processed = self.stats['total_processed']
                current_avg = float(self.stats['average_processing_time'])
                self.stats['average_processing_time'] = (current_avg * (total_processed - 1) + processing_time) / total_processed
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            **self.stats,
            'active_tasks': len(self.active_tasks),
            'completed_tasks': len(self.completed_tasks),
            'queue_size': self.task_queue.qsize(),
            'workers': len(self.workers)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
processor = DocumentProcessor() 