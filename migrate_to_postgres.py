#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
"""

import sqlite3
import psycopg2
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL"""
    
    # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    sqlite_path = "data/documents/documents.db"
    postgres_url = os.getenv("DATABASE_URL", "postgresql://doc_user:doc_password@localhost:5432/doc_checker")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SQLite –±–∞–∑—ã
    if not os.path.exists(sqlite_path):
        logger.error(f"SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {sqlite_path}")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        sqlite_conn = sqlite3.connect(sqlite_path)
        sqlite_cursor = sqlite_conn.cursor()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        postgres_conn = psycopg2.connect(postgres_url)
        postgres_cursor = postgres_conn.cursor()
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        logger.info("–ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        sqlite_cursor.execute("SELECT * FROM documents")
        documents = sqlite_cursor.fetchall()
        
        for doc in documents:
            postgres_cursor.execute('''
                INSERT INTO documents (
                    id, filename, original_filename, doc_type, counterparty, inn,
                    doc_number, date, amount, subject, contract_number, storage_path,
                    telegram_user_id, created_at, updated_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (id) DO NOTHING
            ''', doc)
        
        logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        logger.info("–ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
        sqlite_cursor.execute("SELECT * FROM counterparties")
        counterparties = sqlite_cursor.fetchall()
        
        for cp in counterparties:
            postgres_cursor.execute('''
                INSERT INTO counterparties (
                    id, name, inn, first_document_date, last_document_date,
                    total_amount, document_count, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (id) DO NOTHING
            ''', cp)
        
        logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(counterparties)} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏
        logger.info("–ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–∏...")
        sqlite_cursor.execute("SELECT * FROM business_chains")
        chains = sqlite_cursor.fetchall()
        
        for chain in chains:
            postgres_cursor.execute('''
                INSERT INTO business_chains (
                    id, contract_number, contract_doc_id, counterparty, total_amount,
                    paid_amount, closed_amount, status, created_at, updated_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (id) DO NOTHING
            ''', chain)
        
        logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(chains)} –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–µ–∫")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –≤ —Ü–µ–ø–æ—á–∫–∞—Ö
        logger.info("–ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –≤ —Ü–µ–ø–æ—á–∫–∞—Ö...")
        sqlite_cursor.execute("SELECT * FROM chain_links")
        links = sqlite_cursor.fetchall()
        
        for link in links:
            postgres_cursor.execute('''
                INSERT INTO chain_links (
                    id, chain_id, document_id, link_type, amount, date, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (id) DO NOTHING
            ''', link)
        
        logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(links)} —Å–≤—è–∑–µ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        postgres_cursor.execute("SELECT setval('documents_id_seq', (SELECT MAX(id) FROM documents))")
        postgres_cursor.execute("SELECT setval('counterparties_id_seq', (SELECT MAX(id) FROM counterparties))")
        postgres_cursor.execute("SELECT setval('business_chains_id_seq', (SELECT MAX(id) FROM business_chains))")
        postgres_cursor.execute("SELECT setval('chain_links_id_seq', (SELECT MAX(id) FROM chain_links))")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        postgres_conn.commit()
        
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        sqlite_conn.close()
        postgres_conn.close()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        if 'postgres_conn' in locals():
            postgres_conn.rollback()
            postgres_conn.close()
        if 'sqlite_conn' in locals():
            sqlite_conn.close()
        return False

def backup_sqlite():
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é SQLite –±–∞–∑—ã"""
    sqlite_path = "data/documents/documents.db"
    if os.path.exists(sqlite_path):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"data/documents/documents_backup_{timestamp}.db"
        import shutil
        shutil.copy2(sqlite_path, backup_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = backup_sqlite()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if migrate_data():
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        if backup_path:
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è SQLite: {backup_path}")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        if backup_path:
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {backup_path}")

if __name__ == "__main__":
    main() 